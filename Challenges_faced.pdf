During the Contact Management feature assignment, I encountered a few challenges, but each one was an opportunity to learn and improve the implementation.

State Management with React: Initially, managing the state for contacts and the form was tricky, especially when dealing with updating or deleting contacts. I had to ensure that when a contact was added or deleted, the table displayed the updated data without any glitches. The challenge was syncing the local state with the backend responses. I resolved this by using useState for local state and useEffect to refetch the data after each update, ensuring the UI was always in sync with the database.

Handling Pagination and Sorting in the Table: Implementing pagination and sorting for the contact table was a bit tricky because I had to make sure the table’s UI could handle large datasets efficiently. The challenge was in deciding where to handle pagination — whether it should be done on the front end or back end. I chose to handle pagination and sorting on the backend, fetching only the required data, which improved performance and reduced unnecessary loading times.

Form Validation: Ensuring that the form input was validated correctly, especially to prevent invalid or duplicate data from being added to the database, took a bit of time. For example, preventing users from submitting the form with empty fields or duplicate emails was a challenge. I used a combination of client-side validation (with form libraries like Formik and Yup) and backend validation (checking for existing emails or phone numbers) to ensure the data integrity.

API Error Handling: Proper error handling on the backend was another hurdle. I had to make sure that if something went wrong (like a failed database connection or invalid data), the API would return meaningful error messages. I used try-catch blocks and error middleware to ensure clear and consistent error responses.

UI Consistency with MUI: While Material UI made it easy to create a clean interface, at times it was challenging to customize components to fit the design requirements. I had to tweak some default MUI styles to make sure everything looked cohesive, especially with the contact form layout and table actions. The MUI documentation was helpful in resolving these styling issues.

Overall, these challenges helped me improve my skills in React, backend integration, and UI development, and I’m happy with how the project turned out!
